/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.lang.Math;


init with {:

          sym = new HashMap<String,Float>();
 :}
parser code 	{:


    public HashMap<String,Float> sym;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal TOKEN1, TOKEN2, TOKEN3, SEP;
terminal String ID;
terminal EQ, PLUS, MINUS, MUL, DIV, RO, RC, SC, SQO, SQC, COL;
terminal Float NUMBER;
terminal FZ, CM, IF, IN, RANGE, PRINT;
terminal String PATH, MAX;
terminal String Q_STRING;

non terminal prog, header, program;
non terminal token23_list, token23;
non terminal empty_instruction_list;
non terminal instruction_list, instruction;
non terminal assignment, if;
non terminal Float function;
non terminal Float expression;
non terminal String operation;
non terminal Float[] points_list;
non terminal Float[] point;
non terminal intervals_list, interval;
non terminal Float[] range;
non terminal String SHIFT0, NT0;
non terminal Float NT1;

// Precedences and associativities
// lower precedences
precedence left PLUS, MINUS;
precedence left MUL, DIV;
// higher precedences


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP program   {:  System.out.println("PROG RECOGNIZED"); :}
;

header ::= token23_list TOKEN1 token23_list TOKEN1 token23_list
;

token23_list ::=  /*empty*/
                  |token23_list token23
;

token23 ::= TOKEN2 | TOKEN3
;

program ::= empty_instruction_list
;

empty_instruction_list ::= /*empty*/ | instruction_list
;

instruction_list ::=  instruction instruction instruction instruction
                      | instruction_list instruction instruction
;

instruction ::=  assignment SC
                |function SC
                |if SC
;

assignment ::= ID:id EQ expression:val    {: parser.sym.put(id,val); :}
;

expression ::=    expression:a PLUS expression:b    {: RESULT = a+b; :}
                | expression:a MINUS expression:b   {: RESULT = a-b; :}
                | expression:a MUL expression:b     {: RESULT = a*b; :}
                | expression:a DIV expression:b     {: RESULT = a/b; :}
                | RO expression:a RC                {: RESULT = a;   :}
                | NUMBER:a                          {: RESULT = a;   :}
                | ID:a                              {: RESULT = (Float)parser.sym.get(a);:}
                | function:a                        {: RESULT = a;   :}
;

function ::= FZ RO operation CM SHIFT0 points_list:res RC {: RESULT = res[2]; :}
;

SHIFT0 ::=   /*empty*/ {: RESULT = (String)parser.stack(-1); :}
;

operation ::=  PATH {:  RESULT = new String("PATH"); :}
             | MAX  {:  RESULT = new String("MAX");  :}
;

points_list ::=  point:x1                            {: String op = (String)parser.stack(-1);
                                                        RESULT = new Float[3];
                                                        RESULT[0] = x1[0];
                                                        RESULT[1] = x1[1];
                                                        if(op.equals("MAX")){
                                                          RESULT[2] = new Float(-1.0);
                                                        }else{
                                                          RESULT[2] = new Float(0.0);
                                                        }
                                                     :}
                |points_list:x1 CM NT0:s point:x2 {:
                                                        RESULT = new Float[3];
                                                        RESULT[0] = x2[0];
                                                        RESULT[1] = x2[1];
                                                        Float diff = ((x2[1]-x1[1])*(x2[1]-x1[1])) + ((x2[0]-x1[0])*(x2[0]-x1[0]));
                                                        Double dist = Math.sqrt(diff.doubleValue());
                                                      if(s.equals("MAX")){
                                                        if(x1[2].floatValue() == -1.0){ //first couple
                                                          RESULT[2] = dist.floatValue();
                                                        }else{
                                                          if(dist >= x1[2])
                                                            RESULT[2] = dist.floatValue();
                                                          else
                                                            RESULT[2] = x1[2];
                                                        }
                                                     }else{
                                                       RESULT[2] = x1[2] + dist.floatValue();
                                                     }

                                                  :}
;

NT0 ::= /*empty*/ {: RESULT = (String)parser.stack(-2);; :}
;

point ::= SQO expression:x CM expression:y SQC    {: RESULT = new Float[2];
                                                     RESULT[0] = x;
                                                     RESULT[1] = y;
                                                  :}
;

if ::= IF expression intervals_list
;

intervals_list ::=   interval
                  |  intervals_list CM NT1 interval
;

NT1 ::= /*empty*/ {: RESULT = (Float)parser.stack(-2); :}
;

interval ::= IN RANGE range:r PRINT Q_STRING:s    {: Float res = (Float)parser.stack(-5);
                                                   if(res > r[0] && res < r[1])
                                                        System.out.println(s);
                                                  :}
;

range ::= SQO expression:min COL expression:max SQC {: RESULT = new Float[2];
                                                       RESULT[0] = min;
                                                       RESULT[1] = max;
                                                    :}
;
